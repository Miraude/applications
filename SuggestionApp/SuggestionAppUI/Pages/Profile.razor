@page "/Profile"
@inject IUser user
@inject ISuggestion suggestion
@inject NavigationManager navManager


<h1>My profile</h1>

<div>
    <div>
        <button @onclick="ClosePage"></button>
    </div>
</div>

<div>
    <h2>My account</h2>
    <p>
        <a href="MicrosoftIdentity/Account/EditProfile">
            Edit my profile
        </a>
    </p>
</div>

@if (approved is not null && approved?.Count > 0)
{
    <div>
    <h2>Approved suggestions</h2>
    <p>
        These are your suggestions that are currently active.
    </p>
    @foreach (var s in approved)
    {
        <hr />

        <div>
            @s.Title
        </div>
        <p>
            @s.DateCreated.ToString("MM.dd.yyyy")
        </p>
        <p>
            Total votes: @s.UserVotes.Count
        </p>
        <p>
            @s.Category.CategoryName
        </p>
        <p>
            @s.Description
        </p>
        @if (s.SuggestionStatus is not null)
        {
            <div>
                @s.SuggestionStatus.StatusName
            </div>
            <p>
                @((MarkupString)s.OwnerNotes)
            </p>
        }
    }
</div>
}

@if (archived?.Count > 0)
{
    <div>
    <h2>Archived suggestions</h2>
    <p>
        These are your suggestions that were active but did not gain enough traction.
    </p>
    @foreach (var s in archived)
    {
        <hr />

        <div>
            @s.Title
        </div>
        <p>
            @s.DateCreated.ToString("MM.dd.yyyy")
        </p>
        <p>
            Total votes: @s.UserVotes.Count
        </p>
        <p>
            @s.Category.CategoryName
        </p>
        <p>
            @s.Description
        </p>
        @if (s.SuggestionStatus is not null)
        {
            <div>
                @s.SuggestionStatus.StatusName
            </div>
            <p>
                @((MarkupString)s.OwnerNotes)
            </p>
        }

    }
    </div>
    }
@if (pending?.Count > 0)
{
    <div>
        <h2>Pending suggestions</h2>
        <p>
            these are your suggestions that have not yet been reviewed by the administrators.
        </p>
        @foreach (var s in pending)
        {
            <hr />

            <div>
                @s.Title
            </div>
            <p>
                @s.DateCreated.ToString("MM.dd.yyyy")
            </p>
            <p>
                Total votes: @s.UserVotes.Count
            </p>
            <p>
                @s.Category.CategoryName
            </p>
            <p>
                @s.Description
            </p>
            @if (s.SuggestionStatus is not null)
            {
                <div>
                    @s.SuggestionStatus.StatusName
                </div>
                <p>
                    @((MarkupString)s.OwnerNotes)
                </p>
            }

        }
    </div>
}
@if (rejected?.Count > 0)
{
    <div>
    <h2>Rejected suggestions</h2>
    <p>
        these are your suggestions that were not deemted to be appropriate for the training suggestion site.
    </p>
    @foreach (var s in rejected)
    {
        <hr />

        <div>
            @s.Title
        </div>
        <p>
            @s.DateCreated.ToString("MM.dd.yyyy")
        </p>
        <p>
            Total votes: @s.UserVotes.Count
        </p>
        <p>
            @s.Category.CategoryName
        </p>
        <p>
            @s.Description
        </p>
        @if (s.SuggestionStatus is not null)
        {
            <div>
                @s.SuggestionStatus.StatusName
            </div>
            <p>
                @((MarkupString)s.OwnerNotes)
            </p>
        }
    }
</div>
}

@code {
    private User loggedInUser;
    private List<Suggestion> submissions;
    private List<Suggestion> approved;
    private List<Suggestion> archived;
    private List<Suggestion> pending;
    private List<Suggestion> rejected;

    protected async override Task OnInitializedAsync()
    {

        //TODO - Replace with user lookup
        loggedInUser = await user.GetUserFromAuthentication("abc-123");

        var results = await suggestion.GetUsersSuggestions(loggedInUser.Id);

        if (loggedInUser is not null && results is not null)
        {
            submissions = results.OrderByDescending(s => s.DateCreated).ToList();
            approved = submissions.Where(s => s.ApprovedForRelease && s.Archived == false && s.Rejected == false).ToList();
            archived = submissions.Where(s => s.Archived && s.Rejected == false).ToList();
            pending = submissions.Where(s => s.ApprovedForRelease == false && s.Rejected == false).ToList();
            rejected = submissions.Where(s => s.Rejected).ToList();
        }
    }

    private void ClosePage()
    {
        navManager.NavigateTo("/");
    }

}
