@page "/SampleData"
@inject ICategory category
@inject IStatus status
@inject IUser user
@inject ISuggestion suggestion

<h3>Sample Data</h3>

@if (categoriesCreated)
{
    <h4>Categories have been created</h4>
}
else
{
    <button class="btn btn-primary" @onclick="CreateCategories">Create categories</button>
}

@if (statusesCreated)
{
    <h4>Statuses have been created</h4>
}
else
{
    <button class="btn btn-primary" @onclick="CreateStatuses">Create statuses</button>
}

<button class="btn btn-primary" @onclick="GenerateSampleData">Generate Sample Data</button>


@code {
    private bool categoriesCreated = false;
    private bool statusesCreated = false;

    private async Task GenerateSampleData()
    {
        User u = new()
            {
                FirstName = "Johnny",
                LastName = "Giang",
                DisplayName = "Typado",
                Email = "Johnny.giang@hotmail.com",
                ObjectIdentifier = "abc-123"
            };

        await user.CreateUser(u);

        var foundUser = await user.GetUserFromAuthentication("abc-123");
        var categories = await category.GetAllCategories();
        var statuses = await status.GetAllStatuses();

        HashSet<string> votes = new();
        votes.Add("1");
        votes.Add("2");
        votes.Add("3");

        Suggestion s = new()
            {
                Author = new BasicUser(foundUser),
                Category = categories[0],
                Title = "Our first suggestion",
                Description = "This is a suggestion created by the sample data generation method."
            };
        await suggestion.CreateSuggestion(s);

        s = new()
            {
                Author = new BasicUser(foundUser),
                Category = categories[1],
                Title = "Our second suggestion",
                Description = "This is a suggestion created by the sample data generation method.",
                SuggestionStatus = statuses[0],
                OwnerNotes = "This is the note for the status."
            };
        await suggestion.CreateSuggestion(s);

        s = new()
            {
                Author = new BasicUser(foundUser),
                Category = categories[2],
                Title = "Our third suggestion",
                Description = "This is a suggestion created by the sample data generation method.",
                SuggestionStatus = statuses[1],
                OwnerNotes = "This is the note for the status."
            };
        await suggestion.CreateSuggestion(s);

        s = new()
            {
                Author = new BasicUser(foundUser),
                Category = categories[3],
                Title = "Our fourth suggestion",
                Description = "This is a suggestion created by the sample data generation method.",
                SuggestionStatus = statuses[2],
                UserVotes = votes,
                OwnerNotes = "This is the note for the status."
            };
        await suggestion.CreateSuggestion(s);

        votes.Add("4");

        s = new()
            {
                Author = new BasicUser(foundUser),
                Category = categories[4],
                Title = "Our fifth suggestion",
                Description = "This is a suggestion created by the sample data generation method.",
                SuggestionStatus = statuses[3],
                UserVotes = votes,
                OwnerNotes = "This is the note for the status."
            };
        await suggestion.CreateSuggestion(s);
    }
    private async Task CreateCategories()
    {
        var categories = await category.GetAllCategories();

        if (categories?.Count > 0)
        {
            return;
        }

        Category cat = new()
            {
                CategoryName = "Courses",
                Description = "Full paid courses.",

            };
        await category.CreateCategory(cat);

        cat = new()
            {
                CategoryName = "Dev questions",
                Description = "Advice on being a developer",

            };
        await category.CreateCategory(cat);

        cat = new()
            {
                CategoryName = "In-depth tutorial",
                Description = "A deep-dive video on how to use a topic.",

            };
        await category.CreateCategory(cat);

        cat = new()
            {
                CategoryName = "10-minute Training",
                Description = "A quick \"How do I use this=\" video.",

            };
        await category.CreateCategory(cat);

        cat = new()
            {
                CategoryName = "Other",
                Description = "Nit sure which category this fits in.",

            };
        await category.CreateCategory(cat);

        categoriesCreated = true;
    }

    private async Task CreateStatuses()
    {
        var statuses = await status.GetAllStatuses();
        if (statuses?.Count > 0)
        {
            return;
        }

        Status stat = new()
        {
           StatusName = "Completed",
           StatusDescription = "The suggestion was accepted and the corresponding item was created."
        };
        await status.CreateStatus(stat);

        stat = new()
        {
           StatusName = "Watching",
           StatusDescription = "The suggestion is interesting. We are watching to see how much interest there is in it."
        };
        await status.CreateStatus(stat);

        stat = new()
        {
           StatusName = "Upcoming",
           StatusDescription = "The suggestion was accepted and it will be released soon."
        };
        await status.CreateStatus(stat);

        stat = new()
        {
           StatusName = "Dismissed",
           StatusDescription = "The suggestion was not something that we are going to udnertake."
        };
        await status.CreateStatus(stat);
        statusesCreated = true;
    }
}
