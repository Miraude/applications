@page "/Admin/Approve"
@attribute [Authorize(Policy = "Admin")]
@inject ISuggestion suggestion
@inject IUser user
@inject NavigationManager navManager

<h1>Pending Submissions</h1>

<div>
    <div>
        @submissions?.Count Submissions
    </div>
    <div>
        <button @onclick="ClosePage"></button>
    </div>
</div>

@if (submissions is not null)
{
    foreach (var s in submissions)
    {
        <div>
            <div>
                <button @onclick="(() => ApproveSubmission(s))">Approve</button>
                <button @onclick="(() => RejectSubmission(s))">Reject</button>
            </div>
            <div>
                <div>
                    @if (currentEditingTitle == s.Id)
                   {
                       <EditForm Model="@editedTitle" OnSubmit="(() => SaveTitle(s))">
                           <InputText @bind-Value="editedTitle"/>
                           <button type="submit">
                               <span class="oi oi-check"></span>
                           </button>
                           <button @onclick="(() => currentEditingTitle = string.Empty)">
                               <span class="oi oi-x"></span>
                           </button>
                        </EditForm>
                    }
                    else
                    {
                        @s.Title
                        <span class="oi oi-pencil" @onclick="(() => EditTitle(s))"></span>
                    }
                </div>
                <div>
                    @s.Category.CategoryName
                </div>
                <div>
                    @s.Author.DisplayName
                </div>
                <div>
                    @if (currentEditingDescription == s.Id)
                   {
                       <EditForm Model="@editedDescription" OnSubmit="(() => SaveDescription(s))">
                           <InputText @bind-Value="editedDescription"/> 
                           <button type="submit">
                               <span class="oi oi-check"></span>
                           </button>
                           <button @onclick="(() => currentEditingDescription = string.Empty)">
                               <span class="oi oi-x"></span>
                           </button>
                        </EditForm>
                    }
                    else
                    {
                        @s.Description
                        <span class="oi oi-pencil" @onclick="(() => EditDescription(s))"></span>
                    }
                </div>
            </div>
        </div>
    }
}

@code {
    private List<Suggestion> submissions;
    private Suggestion editingModel;
    private string currentEditingTitle = "";
    private string editedTitle = "";
    private string currentEditingDescription = "";
    private string editedDescription = "";

    protected async override Task OnInitializedAsync()
    {
        submissions = await suggestion.GetWaitingForApprovalSuggestions();
    }

    private async Task ApproveSubmission(Suggestion submission)
    {
        submission.ApprovedForRelease = true;
        submissions.Remove(submission);
        await suggestion.UpdateSuggestion(submission);
    }

    private async Task RejectSubmission(Suggestion submission)
    {
        submission.Rejected = true;
        submissions.Remove(submission);
        await suggestion.UpdateSuggestion(submission);
    }
    private void EditTitle(Suggestion model)
    {
        editingModel = model;
        editedTitle = model.Title;
        currentEditingTitle = model.Id;
        currentEditingDescription = "";
    }

    private async Task SaveTitle(Suggestion model)
    {
        currentEditingTitle = string.Empty;
        model.Title = editedTitle;
        await suggestion.UpdateSuggestion(model);
    }

    private void EditDescription(Suggestion model)
    {
        editingModel = model;
        editedDescription = model.Description;
        currentEditingTitle = "";
        currentEditingDescription = model.Id;
    }

    private async Task SaveDescription(Suggestion model)
    {
        currentEditingDescription = string.Empty;
        model.Description = editedDescription;
        await suggestion.UpdateSuggestion(model);
    }

    private void ClosePage()
    {
        navManager.NavigateTo("/");
    }
}
