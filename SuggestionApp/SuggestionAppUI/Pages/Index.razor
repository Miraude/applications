@page "/"
@inject AuthenticationStateProvider authProvider
@inject ICategory category
@inject IStatus status
@inject IUser user
@inject ISuggestion suggestion
@inject NavigationManager navManager
@*local storage*@
@*SessionStorage is removed upon closing the browser*@
@inject ProtectedSessionStorage sessionStorage

<h1>Training Suggestions</h1>
<div>
    <button class="btn btn-primary">Suggest</button>
</div>

<div>
    <div>@suggestions?.Count Suggestions</div>
    <div>
        <button class="btn btn-primary" @onclick="(() => OrderByNew(true))">New</button>
        <button class="btn btn-primary" @onclick="(() => OrderByNew(false))">Popular</button>
    </div>
    <div>
        <input type="text" placeholder="Search"
               aria-label="Search box"
               @oninput="((txt) => OnSearchInput((string)txt.Value))" />
    </div>
</div>

<div>
    <div>
        @if (suggestions is not null)
        {
            //Virtualize, no need for paging. Infinite scrolling ish. Only loads the visible ones plus a few more. It can also do paging.
            <Virtualize Items="@suggestions" Context="s" OverscanCount="10">
                <div>
                    <div @onclick="(() => VoteUp(s))">
                        <div>@GetUpvoteTopText(s)</div>
                        <span class="oi oi-caret-top"></span>
                        <div>@GetUpvoteBottomText(s)</div>
                    </div>
                    <div>
                        <div @onclick="(() => OpenDetails(s))">
                            @s.Title
                        </div>
                        <div>
                            <div @onclick="(() => OpenDetails(s))">
                                @s.Category?.CategoryName
                            </div>
                        </div>
                    </div>
                    <div>
                        <div>
                            @s.SuggestionStatus?.StatusName
                        </div>
                    </div>
                </div>
            </Virtualize>
        }
    </div>
    <div>
        @if (categories is not null)
        {
            <div>
                <span>Category</span>
                <div @onclick="(() => onCategoryClick())">All</div>
                @foreach (var c in categories)
                {
                    <div @onclick="(() => onCategoryClick(c.CategoryName))">@c.CategoryName</div>
                }
            </div>
        }
        @if (statuses is not null)
        {
            <div>
                <span>Status</span>
                <div @onclick="(() => OnStatusClick())">All</div>
                @foreach (var s in statuses)
                {
                    <div @onclick="(() => OnStatusClick(s.StatusName))">@s.StatusName</div>
                }
            </div>
        }
    </div>
</div>


@code {
    private User loggedInUser;
    private List<Suggestion> suggestions;
    private List<Category> categories;
    private List<Status> statuses;

    private string selectedCategory = "All";
    private string selectedStatus = "All";
    private string searchText = "";
    bool isSortedByNew = true;

    protected async override Task OnInitializedAsync()
    {
        categories = await category.GetAllCategories();
        statuses = await status.GetAllStatuses();
        await LoadAndVerifyUser();
    }
    private async Task LoadAndVerifyUser()
    {
        var authState = await authProvider.GetAuthenticationStateAsync();
        string objectId = authState.User.Claims.FirstOrDefault(c => c.Type.Contains("objectidentifier"))?.Value;
        //object id is used to check if somebody is logged in, thus if it's null, you're not logged in
        if (string.IsNullOrWhiteSpace(objectId) == false)
        {
            loggedInUser = await user.GetUserFromAuthentication(objectId) ?? new();
            //Grab the first claim that contains the value of the given name
            string firstName = authState.User.Claims.FirstOrDefault(c => c.Type.Contains("givenname"))?.Value;
            string lastName = authState.User.Claims.FirstOrDefault(c => c.Type.Contains("surname"))?.Value;
            string displayName = authState.User.Claims.FirstOrDefault(c => c.Type.Equals("name"))?.Value;
            string email = authState.User.Claims.FirstOrDefault(c => c.Type.Contains("email"))?.Value;

            //Track, have we changed the object?
            bool isDirty = false;
            if (objectId.Equals(loggedInUser.ObjectIdentifier) == false)
            {
                isDirty = true;
                loggedInUser.ObjectIdentifier = objectId;
            }
            if (firstName.Equals(loggedInUser.FirstName) == false)
            {
                isDirty = true;
                loggedInUser.FirstName = firstName;
            }
            if (lastName.Equals(loggedInUser.LastName) == false)
            {
                isDirty = true;
                loggedInUser.LastName = lastName;
            }
            if (displayName.Equals(loggedInUser.DisplayName) == false)
            {
                isDirty = true;
                loggedInUser.DisplayName = displayName;
            }
            if (email.Equals(loggedInUser.Email) == false)
            {
                isDirty = true;
                loggedInUser.Email = email;
            }
            if (isDirty)
            {
                if (string.IsNullOrWhiteSpace(loggedInUser.Id))
                {
                    await user.CreateUser(loggedInUser);
                }
                else
                {
                    await user.UpdateUser(loggedInUser);
                }
            }
        }
    }
    //runs after the page is rendered
    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadFilterState();
            await FilterSuggestions();

            StateHasChanged();
        }
    }

    private async Task LoadFilterState()
    {
        var stringResults = await sessionStorage.GetAsync<String>(nameof(selectedCategory));
        selectedCategory = stringResults.Success ? stringResults.Value : "All";

        stringResults = await sessionStorage.GetAsync<String>(nameof(selectedStatus));
        selectedStatus = stringResults.Success ? stringResults.Value : "All";

        stringResults = await sessionStorage.GetAsync<String>(nameof(searchText));
        searchText = stringResults.Success ? stringResults.Value : "";

        var boolResults = await sessionStorage.GetAsync<bool>(nameof(isSortedByNew));
        isSortedByNew = boolResults.Success ? boolResults.Value : true;


    }
    private async Task SaveFilterState()
    {
        await sessionStorage.SetAsync(nameof(selectedCategory), selectedCategory);
        await sessionStorage.SetAsync(nameof(selectedStatus), selectedStatus);
        await sessionStorage.SetAsync(nameof(searchText), searchText);
        await sessionStorage.SetAsync(nameof(isSortedByNew), isSortedByNew);
    }

    private async Task FilterSuggestions()
    {
        var output = await suggestion.GetAllPublicSuggestions();

        if (selectedCategory != "All")
        {
            output = output.Where(s => s.Category?.CategoryName == selectedCategory).ToList();
        }

        if (selectedStatus != "All")
        {
            output = output.Where(s => s.SuggestionStatus?.StatusName == selectedStatus).ToList();
        }

        if (string.IsNullOrWhiteSpace(searchText) == false)
        {
            output = output.Where(
                s => s.Title.Contains(searchText, StringComparison.InvariantCultureIgnoreCase) ||
                s.Description.Contains(searchText, StringComparison.InvariantCultureIgnoreCase)
            ).ToList();
        }

        if (isSortedByNew)
        {
            output = output.OrderByDescending(s => s.DateCreated).ToList();
        }
        else
        {
            output = output.OrderByDescending(s => s.UserVotes.Count)
                           .ThenByDescending(s => s.DateCreated).ToList(); ;
        }

        suggestions = output;

        await SaveFilterState();
    }
    private async Task OrderByNew(bool isNew)
    {
        isSortedByNew = isNew;
        await FilterSuggestions();
    }
    private async Task OnSearchInput(string searchInput)
    {
        searchText = searchInput;
        await FilterSuggestions();
    }

    private async Task onCategoryClick(string category = "All")
    {
        selectedCategory = category;
        await FilterSuggestions();
    }
    private async Task OnStatusClick(string status = "All")
    {
        selectedStatus = status;
        await FilterSuggestions();
    }
    private async Task VoteUp(Suggestion s)
    {

        if (loggedInUser is not null)
        {
            if (s.Author.Id == loggedInUser.Id)
            {
                // Can't vote on your own suggestion
                return;
            }

            if (s.UserVotes.Add(loggedInUser.Id) == false)
            {
                s.UserVotes.Remove(loggedInUser.Id);
            }

            await suggestion.UpvoteSuggestion(s.Id, loggedInUser.Id);

            if (isSortedByNew == false)
            {
                suggestions = suggestions
                    .OrderByDescending(s => s.UserVotes.Count)
                    .ThenByDescending(s => s.DateCreated).ToList();
            }
        }
        else
        {
            navManager.NavigateTo("/MicrosoftIdentity/Account/SignIn", true);
        }
    }
    private string GetUpvoteTopText(Suggestion suggestion)
    {
        if (suggestion.UserVotes?.Count > 0)
        {
            return suggestion.UserVotes.Count.ToString("00");
        }
        else
        {
            if (suggestion.Author.Id == loggedInUser?.Id)
            {
                return "Awaiting";
            }
            else
            {
                return "Click To";
            }
        }
    }
    private string GetUpvoteBottomText(Suggestion suggestion)
    {
        if (suggestion.UserVotes?.Count > 1)
        {
            return "Upvotes";
        }
        else
        {
            return "Upvote";
        }
    }
    private void OpenDetails(Suggestion suggestion)
    {
        navManager.NavigateTo($"/Details/{suggestion.Id}");
    }
}